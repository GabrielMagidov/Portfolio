{"ast":null,"code":"export const PROJECTS={SetCardGame:{title:\"Set Card Game\",description:\"The Set game developed in Java integrates client-side and server-side components, featuring a user-friendly GUI for intuitive gameplay and robust server logic for managing game state and real-time communication. Utilizing multithreading, the system efficiently handles concurrent player interactions, enhancing scalability and responsiveness in multiplayer sessions.\",skills:\"Java, Multithreading, GUI\",link:\"https://github.com/GabrielMagidov/SetCardGame\"},ClientServer:{title:\"Client Server\",description:\"This project integrates client-side (C++) and server-side (Java) components to create a versatile interactive system, with the client-side managing user interactions and communication with the server, and the server-side supporting multiple communication models for robust and scalable operations. The server can operate using a Thread-per-Client model for dedicated thread management or the reactor pattern for event-driven scalability, demonstrating proficiency in C++ and Java, and offering flexibility to enhance responsiveness in interactive applications.\",skills:\"C++, Java, Client-Server Architecture\",link:\"https://github.com/GabrielMagidov/Client-Server\"},shell:{title:\"Linux shell\",description:\"This project focuses on developing a basic shell in C for Linux, serving as a crucial interface between users and the operating system by executing commands, managing system resources, and supporting advanced features like input/output redirection, background process handling, and piping between commands. Implementing core functionalities such as command parsing, process management, and signal handling, this project showcases proficiency in system-level programming and efficient shell design principles.\",skills:\"C, Linux\",link:\"https://github.com/GabrielMagidov/Linux-Pipe-and-Shell\"},portfolio:{title:\"Portfolio\",description:\"This portfolio, built with JavaScript, React, and CSS, highlights my front-end development skills. It features a clean, responsive design and interactive user experiences, showcasing my ability to create modern web applications.\",skills:\"JavaScript, React, CSS\",link:\"https://github.com/GabrielMagidov/Portfolio\"}};","map":{"version":3,"names":["PROJECTS","SetCardGame","title","description","skills","link","ClientServer","shell","portfolio"],"sources":["C:/Users/gabri/OneDrive/מסמכים/React course Udemy/portfolio/frontend/src/data.js"],"sourcesContent":["export const PROJECTS = {\r\n  SetCardGame: {\r\n    title: \"Set Card Game\",\r\n    description:\r\n      \"The Set game developed in Java integrates client-side and server-side components, featuring a user-friendly GUI for intuitive gameplay and robust server logic for managing game state and real-time communication. Utilizing multithreading, the system efficiently handles concurrent player interactions, enhancing scalability and responsiveness in multiplayer sessions.\",\r\n    skills: \"Java, Multithreading, GUI\",\r\n    link: \"https://github.com/GabrielMagidov/SetCardGame\",\r\n  },\r\n  ClientServer: {\r\n    title: \"Client Server\",\r\n    description:\r\n      \"This project integrates client-side (C++) and server-side (Java) components to create a versatile interactive system, with the client-side managing user interactions and communication with the server, and the server-side supporting multiple communication models for robust and scalable operations. The server can operate using a Thread-per-Client model for dedicated thread management or the reactor pattern for event-driven scalability, demonstrating proficiency in C++ and Java, and offering flexibility to enhance responsiveness in interactive applications.\",\r\n    skills: \"C++, Java, Client-Server Architecture\",\r\n    link: \"https://github.com/GabrielMagidov/Client-Server\",\r\n  },\r\n  shell: {\r\n    title: \"Linux shell\",\r\n    description:\r\n      \"This project focuses on developing a basic shell in C for Linux, serving as a crucial interface between users and the operating system by executing commands, managing system resources, and supporting advanced features like input/output redirection, background process handling, and piping between commands. Implementing core functionalities such as command parsing, process management, and signal handling, this project showcases proficiency in system-level programming and efficient shell design principles.\",\r\n    skills: \"C, Linux\",\r\n    link: \"https://github.com/GabrielMagidov/Linux-Pipe-and-Shell\",\r\n  },\r\n  portfolio: {\r\n    title: \"Portfolio\",\r\n    description:\r\n      \"This portfolio, built with JavaScript, React, and CSS, highlights my front-end development skills. It features a clean, responsive design and interactive user experiences, showcasing my ability to create modern web applications.\",\r\n    skills: \"JavaScript, React, CSS\",\r\n    link: \"https://github.com/GabrielMagidov/Portfolio\",\r\n  },\r\n};\r\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,QAAQ,CAAG,CACtBC,WAAW,CAAE,CACXC,KAAK,CAAE,eAAe,CACtBC,WAAW,CACT,gXAAgX,CAClXC,MAAM,CAAE,2BAA2B,CACnCC,IAAI,CAAE,+CACR,CAAC,CACDC,YAAY,CAAE,CACZJ,KAAK,CAAE,eAAe,CACtBC,WAAW,CACT,kjBAAkjB,CACpjBC,MAAM,CAAE,uCAAuC,CAC/CC,IAAI,CAAE,iDACR,CAAC,CACDE,KAAK,CAAE,CACLL,KAAK,CAAE,aAAa,CACpBC,WAAW,CACT,8fAA8f,CAChgBC,MAAM,CAAE,UAAU,CAClBC,IAAI,CAAE,wDACR,CAAC,CACDG,SAAS,CAAE,CACTN,KAAK,CAAE,WAAW,CAClBC,WAAW,CACT,sOAAsO,CACxOC,MAAM,CAAE,wBAAwB,CAChCC,IAAI,CAAE,6CACR,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}